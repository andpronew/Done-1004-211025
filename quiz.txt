A|int x = 5;
A|std::vector<int> v;
B|foo();
B|bar(3, "hello");
C|auto f = [](){ return 42; };
D|for (int i = 0; i < 10; ++i);
D|if (x > 0) {}
D|while (true) {}
E|struct A {};
E|class B {};
A|A a;
A|B b;
B|std::make_shared<A>();
B|std::make_unique<B>();
A|int* p = new int(5);
B|delete p;
A|const int& ref = x;
E|void func(int a = 0);
E|template<typename T> void f(T x);
A|std::function<void()> fn;
A|std::map<std::string, int> m;
B|return 0;
B|std::sort(v.begin(), v.end());
B|std::min(1, 2);
A|using namespace std;
E|namespace my { int y; }
A|int arr[5] = {1,2,3,4,5};
A|char c = 'a';
A|std::string s = "text";
A|float pi = 3.14f;
A|double e = 2.71;
A|bool ok = true;
A|auto z = x + 3;
A|x += 1;
A|y = x > 5 ? 1 : 0;
G|std::cin >> x;
G|std::cout << x;
B|assert(x > 0);
A|static int count = 0;
A|extern int global;
E|enum Color { Red, Green, Blue };
A|Color c = Red;
D|switch (c) { case Red: break; }
H|try { risky(); }
H|catch (...) {}
H|throw std::runtime_error("fail");
A|std::array<int, 5> arr;
F|decltype(x + y) z;
A|constexpr int n = 10;
A|volatile int flag;
E|friend class B;
A|mutable int counter;
A|this->value = 5;
B|std::move(x);
F|std::forward<T>(x);
F|std::is_same<T, int>::value;
B|operator+(a, b);
A|std::unique_ptr<T> p;
F|typename std::vector<T>::iterator it;
F|dynamic_cast<B*>(ptr);
F|static_cast<int>(d);
F|reinterpret_cast<void*>(&x);
F|const_cast<char*>(str);
F|typeid(x).name();
B|new(std::nothrow) int;
B|std::exit(1);
B|std::abort();
F|static_assert(sizeof(int) == 4);
F|std::enable_if_t<std::is_integral<T>::value>
F|template<> void f<int>(int);
E|template<class T = int> class C {};
A|int x[3]{1,2,3};
A|int* q = nullptr;
A|std::optional<int> o;
A|std::variant<int, float> v;
B|std::visit([](auto){}, v);
A|std::tuple<int, double> t;
A|auto [a, b] = t;
A|std::any a = 3;
A|std::monostate m;
B|std::chrono::system_clock::now();
I|std::thread t(func);
I|t.join();
I|std::mutex mtx;
I|std::lock_guard<std::mutex> lock(mtx);
I|std::atomic<int> counter;
I|std::condition_variable cv;
A|std::filesystem::path p("file.txt");
A|std::regex r("\\d+");
A|std::smatch match;
A|std::bitset<8> bits("10101010");
J|std::stack<int> s;
J|std::queue<int> q;
J|std::priority_queue<int> pq;
J|std::set<int> s;
J|std::unordered_map<int, int> h;
I|std::shared_mutex sm;
I|std::scoped_lock lock(sm);
A|std::stringstream ss;
G|std::getline(std::cin, s);
